name: 'Runtime checks'
description: 'Run dynamic analysis tools'

runs:
  using: "composite"
  steps:

    - name: Sanitizers
      shell: bash
      # run one sanitizer for each env to avoid building extra binaries on one env
      if: (matrix.runs_asan == true || matrix.runs_msan == true) && runner.os != 'Windows'
      # detect_leaks is not supported on macOS
      # env:
      #   ASAN_OPTIONS: detect_leaks=1
      run: |
        # run LLM server in background
        source ./scripts/run_llm.sh
        cd ${{ env.ZIP_NAME }}
        cat "${INPUT_FILENAME}" | tr -d '\r' | ./"${EXECUTABLE_NAME}"
        # server shutdown
        kill -TERM $(jobs -p)

    - name: Sanitizers (Windows MSVC)
      shell: bash
      # run one sanitizer for each OS to avoid building extra binaries
      if: matrix.cxx == 'cl' && matrix.runs_asan == true
      continue-on-error: true
      run: |
        # run LLM server in background
        source ./scripts/run_llm.sh
        cd ${{ env.ZIP_NAME }}
        cat "${INPUT_FILENAME}" | tr -d '\r' | ./"${EXECUTABLE_NAME}"
        # server shutdown
        kill -TERM $(jobs -p)

    - name: Valgrind
      shell: bash
      if: runner.os == 'Linux' && matrix.runs_valgrind == true
      run: |
        # run LLM server in background
        source ./scripts/run_llm.sh
        # remove --show-leak-kinds=all (and --track-origins=yes) if there are many leaks in external libs
        cd ${{ env.ZIP_NAME }}
        cat "${INPUT_FILENAME}" | tr -d '\r' | valgrind \
            --leak-check=full --show-leak-kinds=all --track-origins=yes \
            --error-exitcode=1 \
            ./"${EXECUTABLE_NAME}"| 
        # server shutdown
        kill -TERM $(jobs -p)
